%======== USER-CONFIGURABLE OPTIONS =======
numGenes      = 2;     	% hardwired for now
numNuclei     = 20;     % number of "nuclei" or "initial conds"
numTimepoints = 21; 
timestep      = 0.1;

%======== CODE STARTS HERE =======
global opts;
global ODEopts;

clc;
tt      = (0:numTimepoints-1)' * timestep;
numRegs = numGenes;

gmax = numGenes;  % YLL's useful aliases
nmax = numNuclei;
tmax = numTimepoints;
kmax = numNuclei * numTimepoints;

%======== SET OPTIONS (see README.md for description) ========
% NOTE: slopethresh, exprthresh, splinesmoothing are in pvxOpts_ngo
% NOTE: Rld_tsafety also should be removed.
pvxOpts_ngo = NaN (numNuclei, numGenes, 3);
pvxOpts_ngo(:,:,1) = 1.00;  % p (spline unsmoothing parameters)
pvxOpts_ngo(:,:,2) = 0.01;  % v (velocity thresholds)
pvxOpts_ngo(:,:,3) = 0.20;  % x (expression thresholds)
opts = struct(  'debug', 0, ...
    'Rld_tsafety', 3, ...       % should eventually ged rid
    'spatialsmoothing', 0.5, ...
    'minborder_expr_ratio', 0.01, ...
    'Rld_method', 'slope', ...
    'synthesisfunction', 'synthesis_sigmoid_sqrt', ...
    'ODEAbsTol', 1e-5, ...      % originally 1e-3
    'ODEsolver', 'ode45', ...
    'pvxOpts_ngo', pvxOpts_ngo, ...
    'lambda', 0.5, ...
    'lm', 'FIGRlogReg'); % glmfit|FIGRlogReg|lassoglm
ODEopts = odeset('AbsTol', opts.ODEAbsTol);



grn.Tgg     = [1 -.5 ; -.5 1];   % gene 1 and 2 are both autoactivating
grn.hg      = [-.25    -.25]';   % trajs are supposed to diverge to
grn.Rg      = [2       1]';      % 4 corners
grn.lambdag = [2       1]';
grn.Dg      = [0       0]';
%======== GENERATE RANDOM INITIAL CONDITIONS x WITHIN BIOLOGICALLY RELEVANT SUBSPACE
xntg        = NaN ([numNuclei,numTimepoints,numRegs]);
xntg(:,1,:) = rand (numNuclei, numRegs) .* grn.Rg' ./ grn.lambdag';
xntg(:,:,numGenes+1:end) = 0.;
%======== COMPUTE TRAJECTORIES FOR THE TOY MODEL ABOVE ========
[xntg] = computeTrajs (opts, grn, xntg, tt);

%
%
% THERE IS SOMETHING WRONG.  THE ABOVE CODE
% NEVER GIVES TRAJS THAT DIVERGE (EVEN IF GENE 1 is autoactivatin!)
%
% TO DO: PUT IN A T MATRIX AND OTHER PARS
% THAT ARE KNOWN TO DIVERGE TO 4 CORNERS.
%   SEE IF WE STILL SEE CONVERGENCE...

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  FIGURE 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%======== VISUALIZE GENE STATES ========
close all;
figure ('Position', [0 0 600 600]); hold on;
set (gcf, 'name', 'Data');
title ('Gene A velocity (green $v_A>0$, red $v_A<0$)', 'interpreter','latex');
xlabel ('$x_A$', 'interpreter', 'latex');
ylabel ('$x_B$', 'interpreter', 'latex');
axis ([0 1 0 1]);
%======== Trajectories (curves) ========
plot (squeeze (xntg(:,:,1))', squeeze (xntg(:,:,2))', 'color', [.4 .4 .4]); %gray
return;
%======== Datapoints (filled circles) ========
gTarget = 1;


xkg = reshape (xntg, [kmax gmax]);
%ykg = reshape (diagnostics.yntg, [kmax gmax]);
%vkg = reshape (diagnostics.vntg, [kmax gmax]);
yk = diagnostics.yntg(:,:,gTarget); yk = yk (:);
vk = diagnostics.vntg(:,:,gTarget); vk = vk (:);

markerSizes  = 100.0 * abs (vk) .^ 0.5;  % bigger markers mean stronger vels
markerColors = NaN (kmax, 3);
for k=1:kmax
    if (yk(k)>0) 
        markerColors(k,:) = [0 .5 0]; % green = ON
    elseif (yk(k)<0) 
        markerColors(k,:) = [.7 0 0]; % red = OFF
    else
        markerColors(k,:) = [.5 .5 .5]; % gray = UNKNOWN
    end
end
scatter (xkg(:,1), xkg(:,2), markerSizes, markerColors, 'filled');


return;
