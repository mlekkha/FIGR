function [xntg] = computeTrajsUsingUnfold (opts,grn,Xntg,tt)

% This functions calls "unfold" to solve the differentgal equations
%
%   d/dt x_ntg = R_g g( sum_f T_gf x_ntf + h_g) - lambda_g x_ntg
%
% where x_ntg for n=1:numGenes                        are provided only at t=0
% and   x_ntg for n=numGenes+1:numGenes+numExternals  are provided at all t values.
%
% INPUTS:
%   runParams paths, unfold options etc. in a struct
%   T_gf      genetic interconnect matrix
%   h_g       promoter thresholds
%   X_ntg     full time series for all genes ("facts")
%   R_g       promoter strengths
%   lambda_g  protein half-lives
%
% RETURNS:
%   tt        time points
%   x_ntg     full time series for genes i=1:N (recomputed by solving ODEs)
%
% FILES:   ~/code/glassmodels/lohComputeTrajectories
%          ~/genecircuits/networkPars
%          ~/genecircuits/trajectories
%

fprintf  ('DEPRECATED! YLL MAY NOT HAVE FIXED THIS PROPERLY \n');

% HARDWIRED! need lineage numbers to write out the gene circuit input file
nuclei = [8227:1:8284]';


if opts.debug > 0
    fprintf ('======== computeTrajsUsingUnfold() ========\n');
    fprintf ('======== VALIDATING INPUTS ========\n');
end
numNuclei     = size (Xntg, 1);
numTimepoints = size (Xntg, 2);
numGenes      = numel (grn.Rg);
numExternals  = size (Xntg,3) - numGenes;

if opts.debug > 0
    fprintf ('tt = \n %s\n'    , mat2str_compact (tt') );
    fprintf ('nuclei = \n %s\n', num2str (nuclei') );
    fprintf ('numNuclei          = %d \n',numNuclei);
    fprintf ('numTimepoints      = %d \n',numTimepoints);
    fprintf ('numGenes           = %d \n',numGenes);
    fprintf ('numExternals       = %d \n',numExternals);
    fprintf ('size(Xntg)         = %d %d %d \n', size(Xntg));
end

assert ( isequal ( size(grn.Tgg    ), [numGenes   numGenes+numExternals] ) );
assert ( isequal ( size(grn.hg     ), [numGenes, 1] ) );
assert ( isequal ( size(grn.Rg     ), [numGenes, 1] ) );
assert ( isequal ( size(grn.lambdag), [numGenes, 1] ) );
assert ( isequal ( size(grn.Dg     ), [numGenes, 1] ) );
assert ( isequal ( size(Xntg   ), [numNuclei  numTimepoints numGenes+numExternals] ) );

zeroes  = 0*nuclei;                        % for convenience
%tt=0;xntg=0;return; %ABORTING

if opts.debug > 0
    fprintf ('======== WRITING FILES timepoints AND networkPars ========\n');
end

%======== PREPARE FILE timepoints ========
dlmwrite (opts.timepoints, tt);

%======== PREPARE FILE networkPars ========
filename = opts.tempcirc;
fileID = fopen (filename, 'w');
fprintf (fileID, multiline ({
    '$version'
    'BLAH fly_sa version 9.5.4 serial'
    'BLAH ../fly/fly_sa -i 4.0 -t -s bs -a 0.001 ggm1_001'
    '$$'
    ''
    '$comment'
    'This file was generated by the matlab routine lohComputeTrajectores()'
    '$$'
    ''
    }));

fprintf (fileID, '$problem \n');
fprintf (fileID, 'number_of_genes:            \n %d\n', numGenes);
fprintf (fileID, 'number_of_external_inputs:  \n %d\n', numExternals);
fprintf (fileID, 'gene_IDs:                   \n %s\n', sprintf ('%s',opts.geneNames{1:numGenes})); % ABC...
fprintf (fileID, 'external_gene_IDs:          \n %s \n',sprintf ('%s',opts.geneNames{numGenes+1:end})); % ZYX...
fprintf (fileID, 'number_of_cell_divisions:   \n %d \n', 0);
fprintf (fileID, 'numbers_of_nuclei_at_cycle_14:\n%d\n', numNuclei);
fprintf (fileID, 'diffusion_schedule:         \n %s \n','A');
fprintf (fileID, '$$\n\n');

fprintf (fileID, '$genotypes \n');
fprintf (fileID, ['march90.bias  output  vdummy  hist  ext ' repmat('W',1,numGenes)  '\n']);
fprintf (fileID, '$$\n\n');

fprintf (fileID, '$input\n');
fprintf (fileID, 'promoter_strengths:           \n %s\n', num2str (grn.Rg) );
fprintf (fileID, 'genetic_interconnect_matrix:  \n %s  ', mat2str (grn.Tgg(:,1:numGenes)) );
fprintf (fileID, 'external_input_strengths:     \n %s  ', mat2str (grn.Tgg(:,numGenes+1:numGenes+numExternals)) );
fprintf (fileID, 'maternal_connection_strengths:\n %s\n', num2str (0*grn.hg)); % N/A. Need zeroes here.
fprintf (fileID, 'promoter_thresholds:          \n %s\n', num2str (grn.hg'));
fprintf (fileID, 'diffusion_parameter(s):       \n %s\n', num2str (grn.Dg'));
fprintf (fileID, 'protein_half_lives:           \n %s\n', num2str (log(2) ./ grn.lambdag'));
fprintf (fileID, 'translational_transcriptional_delays:\n %s\n', num2str (repmat(-999.0,1,numGenes))); % N/A
fprintf (fileID, '$$\n\n');
fprintf (fileID, '$vdummy\n');
fprintf (fileID, '%s', mat2str ( [nuclei  zeroes ] ));
fprintf (fileID, '$$\n\n');

fprintf (fileID, '$hist\n');
fprintf (fileID, ['  lin   t '  sprintf('%8s',opts.geneNames{1:numGenes})   '\n']);
fprintf (fileID, '%s', mat2str ( [nuclei  zeroes  repmat(0, numNuclei, numGenes)] ));
fprintf (fileID, '$$\n\n');

fprintf (fileID, '$ext\n');
fprintf (fileID, ['  lin   t '  sprintf('%8s',opts.geneNames{numGenes+1:end})   '\n']);

for t=1:numTimepoints
    for n=1:numNuclei
        fprintf (fileID, '%4d%8g', nuclei(n), tt(t) );
        fprintf (fileID, '%8g', squeeze(Xntg(n, t, numGenes+1:end)) );
        fprintf (fileID, '\n');
    end
    fprintf (fileID, '\n');
end
fprintf (fileID, '$$\n\n');

fprintf (fileID, '$march90.bias\n');
fprintf (fileID, '%s', mat2str ( [  nuclei  zeroes   squeeze(Xntg(:,1,1:numGenes))  ] ));
fprintf (fileID, '$$\n\n');
fclose (fileID);

if opts.debug > 0
    fprintf ('======== CALLING UNFOLD TO SOLVE ODES ========\n');
end
% -s r4     ODE solver set to fourth order Runge-Kutta
% -i 0.01   ODE solver stepsuze
% -a 0.001  ODE solver accuracy
% -x input  Use equation parameters from section "input"
% -g h      Use Heaviside function

system (['cd ' opts.circdir '; ' opts.unfold ' ' ...
    opts.unfoldopts ' ' opts.tempcirc ' > ' ...
    opts.unfoldout]);

system (['sed -i ''/$$\|Unfold\|$output/d'' ' opts.unfoldout]); % strip dollar signs and stuff

%======= Read the data file "trajectories"
% so that         xntg is 58 x 9 x 4
% for comparison, Xntg is 58 x 9 x 7
if opts.debug > 0
    fprintf ('======== READING FILE trajectories ========\n');
end
trajectories = dlmread (opts.unfoldout);
%tt = unique (trajectories (:,2));  % time values
%numTimepoints = size (tt, 1);
trajectories = trajectories(:,3:end);  % drop first two columns
xntg = reshape (trajectories, numNuclei, numTimepoints, numGenes);

%======= xntg contains trajectories for HKGN.  Now tack on the BCT trajs.
% In general we may need to interpolate the BCT trajs to the desired timepoints...
xntg = cat (3, xntg, Xntg(:,:,numGenes+1:end));

if opts.debug > 0
    fprintf ('numNuclei          = %d \n',numNuclei);
    fprintf ('numTimepoints      = %d \n',numTimepoints);
    fprintf ('numGenes           = %d \n',numGenes);
    fprintf ('size(xntg)         = %d %d %d \n', size(xntg));
    fprintf ('=======================================\n\n\n\n');
end
end






%======== HELPER FUNCTIONS FOR STRING I/O ===============
function out = mat2str (mat)     % Convert matrix to string
fmt = [ repmat('%g\t', 1, size(mat, 2))     '\n' ];
out = sprintf (fmt, transpose(mat));
end
function out = mat2str_compact (mat)
fmt = [ repmat('%g ', 1, size(mat, 2))     '\n' ];
out = sprintf (fmt, transpose(mat));
end
function out = multiline (strs)  % Construct multiline string literal
strs(:,2) = {'\n'};
strs=strs';
out = cat(2, strs{:});
end

%======== Dump the file "networkPars"
%fprintf ('Wrote to %s : \n', filename);    % type (filename);
